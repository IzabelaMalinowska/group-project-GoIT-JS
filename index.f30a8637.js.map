{"mappings":"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","sources":["src/js/modal.js","src/js/pagination.js","src/js/movie-template.js","src/js/movies-container.js","src/js/movie-search.js"],"sourcesContent":["const close = document.querySelector('.close_modal_window');\nconst modal = document.querySelector('.modal_window');\nconst main = document.querySelector('main');\nconst innerModal = document.querySelector('.modal_inner');\n\nfunction onCloseModal() {\n  modal.classList.add('is-hidden');\n  innerModal.innerHTML = '';\n  document.body.classList.remove('stop-scrolling');\n}\nfunction onCloseModalEscKey(e) {\n  if (e.code === 'Escape') {\n    onCloseModal();\n    modal.removeEventListener('click', onCloseModal);\n    document.body.classList.remove('stop-scrolling');\n  }\n}\n\nmain.addEventListener('click', onShowModal);\nclose.addEventListener('click', onCloseModal);\ndocument.body.addEventListener('keydown', onCloseModalEscKey);\ndocument.body.addEventListener('click', onCloseModalClick);\n\nasync function onShowModal(e) {\n  e.preventDefault();\n  if (!e.target.classList.contains('movie__image')) {\n    return;\n  } else {\n    modal.classList.remove('is-hidden');\n    const selectedMovieId = e.target.id;\n    getMovie(selectedMovieId);\n    document.body.classList.add('stop-scrolling');\n  }\n}\n\nfunction onCloseModalClick(e) {\n  if (e.target === modal) {\n    onCloseModal();\n    document.body.classList.remove('stop-scrolling');\n    modal.removeEventListener('click', onCloseModal);\n  }\n}\n\nasync function getMovie(movieId) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=28f50cf3f177782503c21b43af04c7bc`,\n    );\n    const movieInformation = await response.json();\n    getMovieAndUpdateUI(movieInformation);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieAndUpdateUI(movie) {\n  try {\n    const { desktop, tablet, mobile } = `https://image.tmdb.org/t/p/original${movie.poster_path}`;\n    const modalMarkup = `\n      <div class=\"modalMarkup trailer__picture\">\n         <picture>\n            <source src= ${desktop} media=\"(min-width: 1200px)\">\n            <source src= ${tablet} media=\"(min-width: 768px)\">\n            <source src= ${mobile} media=\"(min-width: 320px)\">\n            <img src= https://image.tmdb.org/t/p/original${movie.poster_path} \n            alt=${movie.title} \n            id =${movie.id} class=\"modal__img\">\n        </picture>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" \n        width=\"70px\" height=\"70px\" \n        class=\"modal__svg\" \n        id=${movie.id}\n        viewBox=\"0 0 16 16\">\n         <path \n         id=${movie.id} d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\n         <path\n         id=${\n           movie.id\n         } d=\"M6.271 5.055a.5.5 0 0 1 .52.038l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 6 10.5v-5a.5.5 0 0 1 .271-.445z\"/>\n        </svg>\n      </div>\n      <div class=\"modal__content-movie \">\n\n\n        <p class=\"modal__title\">${movie.title}</p>\n        <div class=\"modal__box\">\n          <div class=\"film-features\">\n            <p class=\"film-features__text\">Vote / Votes</p>\n            <p class=\"film-features__text\">Popularity</p>\n            <p class=\"film-features__text\">Original Title</p>\n            <p class=\"film-features__text\">Genre</p>\n          </div>\n          <div class=\"film-values\">\n            <p class=\"film-values__text\">\n              <span class=\"film-values__vote film-values__vote--color\">${movie.vote_average}</span>\n              <span class=\"film-values__slash\">/</span>\n              <span class=\"film-values__vote film-values__votes--color\">${movie.vote_count}</span>\n            </p>\n            <p class=\"film-values__text\">\n              <span class=\"film-value__vote\">${movie.popularity.toFixed(1)}</span>\n            </p>\n            <p class=\"film-values__text\">\n              <span class=\"film-values__vote\">${movie.original_title}</span>\n            </p>\n            <p class=\"film-values__text\">\n              <span class=\"film-values__vote\">${movie.genres[0].name}</span>\n            </p>\n          </div>\n        </div>\n        <div class=\"modal__description\">\n          <p class=\"modal__about\">About</p>\n          <p class=\"modal__text\">${movie.overview}</p>\n        </div>\n        <div class=\"modal__btn-box\">\n          <button \n          class=\"modal__btn modal__btn--watched\" \n          id=\"${movie.id}\" type=\"button\" >Add to watched</button>\n          <button \n          class=\"modal__btn modal__btn--queue\"\n          id=\"${movie.id}\" type=\"button\" >Add to queue</button>\n\n        </div>\n      </div>`;\n\n    innerModal.insertAdjacentHTML('beforeend', modalMarkup);\n  } catch (e) {\n    console.log(e);\n  }\n}\n","import { getPopularMoviesData } from './movie-template';\nimport Pagination from 'tui-pagination';\n\nconst options = {\n  totalItems: 1000,\n  itemsPerPage: 20,\n  visiblePages: 5,\n  page: 1,\n  centerAlign: true,\n  template: {\n    page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n    currentPage: '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n    moveButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</a>',\n    disabledMoveButton:\n      '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</span>',\n    moreButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' + '<span>⋅⋅⋅</span>' + '</a>',\n  },\n};\n\nconst pagination = new Pagination('pagination', options);\n\npagination.on('afterMove', function (eventData) {\n  window.scrollTo({ top: 0, behavior: 'smooth' });\n  const currentPage = eventData.page;\n  const startIndex = (currentPage - 1) * options.itemsPerPage;\n  const endIndex = startIndex + options.itemsPerPage;\n\n  if (currentPage > 1) {\n    getPopularMoviesData(startIndex, endIndex);\n  }\n});\n\nexport default pagination;\n","import pagination from './pagination';\nimport { Spinner } from 'spin.js';\nimport { opts } from './spinner';\n\nconst main = document.querySelector('main');\n\n//TWORZENIE SZABLONU FILMU NA STRONĘ GŁÓWNĄ\nconst createMainMovieTemplateHTML = (image, id, title, genres, year) => {\n  const twoGenres = genres && genres.length > 0 ? genres.slice(0, 2).join(', ') : '';\n  return `<li class=\"movie__template\">\n    <img class=\"movie__image\" id=\"${id}\" src=\"${image}\" alt='${title}' loading=\"lazy\" width=\"280px\" height=\"398px\"/> \n    <h5 class=\"movie__title\">${title}</h5>\n    <div class=\"movie__informations\"><span>${twoGenres}</span> | <span>${year}</span></div>\n  </li>`;\n};\n\nconst createMainMovieTemplate = async movies => {\n  const moviesList = await Promise.all(\n    movies.map(async movie => {\n      const image = movie.poster_path\n        ? `https://image.tmdb.org/t/p/original${movie.poster_path}`\n        : 'default-image-url';\n      const id = movie.id;\n      const title = movie.title ? movie.title : movie.name;\n      const movieDate = movie.release_date ? movie.release_date : movie.first_air_date;\n      const year = new Date(movieDate).getFullYear();\n      const arrayOfGenresIds = movie.genre_ids;\n      const genres = await getGenresData(arrayOfGenresIds);\n      return createMainMovieTemplateHTML(image, id, title, genres, year);\n    }),\n  );\n  main.innerHTML = moviesList.join('');\n};\n\n//SZUKANIE nazwy gatunku filmu po jego ID\nconst searchIdForName = (data, arrayOfIds) => {\n  const names = data\n    .filter(d => arrayOfIds.includes(d.id))\n    .map(d => {\n      return d.name;\n    });\n  return names;\n};\n\n//FETCH listy gatunków filmów (id, name)\nconst getGenresData = async arrayOfIds => {\n  try {\n    const response = await fetch(\n      'https://api.themoviedb.org/3/genre/movie/list?api_key=28f50cf3f177782503c21b43af04c7bc',\n    );\n    const data = await response.json();\n    const genresData = await data.genres;\n    if (arrayOfIds) {\n      const names = searchIdForName(genresData, arrayOfIds);\n      return names;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst spinner = new Spinner(opts).spin();\nconst loader = document.getElementById('loader');\n\n//FETCH najpopularniejszych na dziś filmów\nexport const getPopularMoviesData = async page => {\n  if (spinner.el instanceof Node) {\n    loader.appendChild(spinner.el);\n  }\n\n  const url = `https://api.themoviedb.org/3/trending/all/day?api_key=28f50cf3f177782503c21b43af04c7bc&page=${page}`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const popularMovies = await data.results;\n    createMainMovieTemplate(popularMovies);\n    pagination.getCurrentPage(page);\n  } catch (error) {\n    console.log(error);\n  } finally {\n    spinner.stop();\n  }\n};\n\npagination.on('afterMove', evt => {\n  getPopularMoviesData(evt.page);\n});\n\ngetPopularMoviesData(1);\n\nconst libraries = {\n  createMainMovieTemplateHTML,\n  createMainMovieTemplate,\n  searchIdForName,\n  getGenresData,\n};\n\nexport default libraries;\n","const mainElement = document.querySelector('main');\nmainElement.classList.add('movies-container');\n","import { Spinner } from 'spin.js';\nimport { opts } from './spinner';\nimport pagination from './pagination';\n\nconst searchMoviesForm = document.querySelector('#form');\nconst searchMovieInput = document.querySelector('#topSearch');\nconst main = document.querySelector('main');\nconst searchErrorMsg = document.querySelector('.error-msg');\nconst paginationTemplate = document.querySelector('#pagination');\n\nlet page = 1;\nconst API_KEY = '28f50cf3f177782503c21b43af04c7bc';\nconst SEARCH_API = `https://api.themoviedb.org/3/search/movie?&api_key=${API_KEY}&page=${page}&query=`;\n\nconst spinner = new Spinner(opts).spin();\nconst loader = document.getElementById('loader');\n\nsearchErrorMsg.classList.add('is-hidden');\n\nconst getResults = async url => {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    showResults(data.results);\n    getGenresData(data.genres);\n    pagination.reset();\n\n    if (data.results.length === 0) {\n      searchErrorMsg.classList.remove('is-hidden');\n      main.innerHTML = '';\n      paginationTemplate.classList.add('is-hidden');\n      return;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst searchPoster = movie => {\n  let posterPath = movie.poster_path ? movie.poster_path : movie.backdrop_path;\n  if (posterPath === null) {\n    return 'https://images.pexels.com/photos/5721902/pexels-photo-5721902.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2';\n  } else {\n    return `https://image.tmdb.org/t/p/original${posterPath}`;\n  }\n};\n\nconst showResults = movies => {\n  main.innerHTML = '';\n  movies.forEach(async movie => {\n    let { id, title, genres, year } = movie;\n    let IMAGE_PATH = searchPoster(movie);\n    const movieDate = movie.release_date ? movie.release_date : movie.first_air_date;\n    year = new Date(movieDate).getFullYear();\n    genres = await getGenresData(movie.genre_ids);\n    id = movie.id;\n\n    const movieElement = document.createElement('div');\n\n    movieElement.innerHTML = `<li class=\"movie__template\">\n    <img class=\"movie__image\" id=\"${id}\" src=\"${IMAGE_PATH}\" alt='${title}' loading=\"lazy\" width=\"280px\" height=\"398px\"/> \n    <h5 class=\"movie__title\">${title}</h5>\n    <div class=\"movie__informations\"><span>${genres}</span> | <span>${year}</span></div>\n  </li>`;\n    main.appendChild(movieElement);\n  });\n};\n\nconst searchIdForName = (data, arrayOfIds) => {\n  const names = data\n    .filter(d => arrayOfIds.includes(d.id))\n    .map(d => {\n      return d.name;\n    });\n  return names;\n};\n\nconst getGenresData = async arrayOfIds => {\n  loader.append(spinner.el);\n  try {\n    const GENRES_PATH = `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`;\n    const response = await fetch(GENRES_PATH);\n    const data = await response.json();\n    const genresData = await data.genres;\n    loader.remove(spinner.el);\n    if (arrayOfIds) {\n      const names = searchIdForName(genresData, arrayOfIds);\n      return names;\n    }\n  } catch (error) {\n    console.log(error);\n  } finally {\n    spinner.stop();\n  }\n};\n\nsearchMoviesForm.addEventListener('submit', e => {\n  e.preventDefault();\n  window.scrollTo({ top: 0, behavior: 'smooth' });\n  const query = searchMovieInput.value;\n\n  if (query) {\n    getResults(SEARCH_API + query);\n    searchMovieInput.value = '';\n  }\n});\n\npagination.on('afterMove', e => {\n  getResults(e.page);\n});\n"],"names":["$2ea800676e6f7669$var$close","document","querySelector","$2ea800676e6f7669$var$modal","$2ea800676e6f7669$var$main","$2ea800676e6f7669$var$innerModal","$2ea800676e6f7669$var$onCloseModal","classList","add","innerHTML","body","remove","addEventListener","async","e","preventDefault","target","contains","movieId","response","fetch","movie","desktop","tablet","mobile","poster_path","modalMarkup","title","id","vote_average","vote_count","popularity","toFixed","original_title","genres","name","overview","insertAdjacentHTML","console","log","$2ea800676e6f7669$var$getMovieAndUpdateUI","json","error","$2ea800676e6f7669$var$getMovie","code","removeEventListener","$baa48fd5a30d32e8$var$options","totalItems","itemsPerPage","visiblePages","page","centerAlign","template","currentPage","moveButton","disabledMoveButton","moreButton","$baa48fd5a30d32e8$var$pagination","$parcel$interopDefault","$afPuq","on","eventData","window","scrollTo","top","behavior","startIndex","$e5202c063a16b44b$export$2447330bd6559d4d","$baa48fd5a30d32e8$export$2e2bcd8739ae039","$e5202c063a16b44b$var$main","$e5202c063a16b44b$var$createMainMovieTemplateHTML","image","year","length","slice","join","$e5202c063a16b44b$var$createMainMovieTemplate","movies","moviesList","Promise","all","map","movieDate","release_date","first_air_date","Date","getFullYear","arrayOfGenresIds","genre_ids","$e5202c063a16b44b$var$getGenresData","$e5202c063a16b44b$var$searchIdForName","data","arrayOfIds","filter","d","includes","genresData","$e5202c063a16b44b$var$spinner","$c3H7h","Spinner","$3bAln","opts","spin","$e5202c063a16b44b$var$loader","getElementById","el","Node","appendChild","url","popularMovies","results","getCurrentPage","stop","evt","parcelRequire","$f3910828a2f1dbdd$var$searchMoviesForm","$f3910828a2f1dbdd$var$searchMovieInput","$f3910828a2f1dbdd$var$main","$f3910828a2f1dbdd$var$searchErrorMsg","$f3910828a2f1dbdd$var$paginationTemplate","$f3910828a2f1dbdd$var$API_KEY","$f3910828a2f1dbdd$var$SEARCH_API","$f3910828a2f1dbdd$var$spinner","$f3910828a2f1dbdd$var$loader","$f3910828a2f1dbdd$var$getResults","$f3910828a2f1dbdd$var$showResults","$f3910828a2f1dbdd$var$getGenresData","reset","forEach","IMAGE_PATH","posterPath","backdrop_path","$f3910828a2f1dbdd$var$searchPoster","movieElement","createElement","append","GENRES_PATH","names","$f3910828a2f1dbdd$var$searchIdForName","query","value"],"version":3,"file":"index.f30a8637.js.map"}